import pyautogui
import cv2
import numpy as np
import time
import threading
import sys
from PIL import Image
import os
import keyboard
import tkinter as tk

# Configuration
TOTAL_LOOP = 0 
IMAGE_LEVEL = "./images/image_lvl.PNG"
IMAGE_JOIN = "./images/image_join_2.PNG"
IMAGE_OUT_FIGHT = "./images/image_out.PNG"  # Chemin vers l'image √† d√©tecter si hors combat
IMAGE_IN_FIGHT = "./images/image_fight.PNG"  # Chemin vers l'image √† d√©tecter si hors combat
OUT_FIGHT_REGION = (655, 961, 31, 29)  # Zone √† surveiller (x, y, largeur, hauteur)
IN_FIGHT_REGION = (655, 961, 31, 29)  # Zone pour la deuxi√®me image (optionnel, sinon m√™me que OUT_FIGHT_REGION)
LVL_REGION = (841, 342, 156, 30) # (x, y, largeur, hauteur)
#JOIN_REGION = (70, 476, 214, 88) # (x, y, largeur, hauteur)
JOIN_REGION = (8, 492, 36, 39) # (x, y, largeur, hauteur)
CONFIDENCE = 0.7  # Seuil de confiance pour la d√©tection (0.0 √† 1.0)
LVL_CONFIDENCE = 0.6  # Seuil de confiance pour le level up (plus strict pour √©viter les faux positifs)
CHECK_INTERVAL = 3  # Intervalle en secondes entre chaque v√©rification
SECOND_CHECK_DELAY = 15  # D√©lai avant de reprendre la loop principale apr√®s d√©tection de la 2√®me image
TIMEOUT_THRESHOLD = 30  # Seuil en secondes pour d√©tecter un blocage
DEBUG_MODE = False  # Active les messages de debug d√©taill√©s

RESTART_CLICK_POSITIONS = [
    (1898, 10),
    (293, 450),
    (1034, 568)
]

# Coordonn√©es o√π cliquer quand l'image est d√©tect√©e
RESTART_DUNGEON_CLICK_POSITIONS = [
    (874, 371),  
    (1111, 418), 
    (582, 329), 
    (836, 391),  
    (1030, 441), 
    (1030, 441)
]

IN_FIGHT_CLICK_POSITIONS = [
    (1384, 977)  # Passe tour si besoin
]

JOIN_CLICK_POSITIONS = [
    (170, 535)  # Premier clic pour rejoindre
]

LVL_UP_CLICK = [
    (968, 800)
] # Click si level up

# Variables globales pour le monitoring
last_check_time = time.time()
is_running = True
check_counter = 0
template_cache = {}  # Cache pour les images templates
start_time = time.time()  # Temps de d√©part pour le restart
watchdog_thread_ref = None  # R√©f√©rence au thread watchdog
fight_counter = 1  # Compteur de fights
counter_window = None  # R√©f√©rence √† la fen√™tre du compteur

# D√©lai entre chaque clic (en secondes)
CLICK_DELAY = 2.5  # 2.5 secondes
CLICK_DELAY_SMALLER = 1.5  # 1.5 secondes

# Variables globales pour le monitoring
last_check_time = time.time()
is_running = True
check_counter = 0

def debug_print(message):
    """Affiche un message de debug avec timestamp si le mode debug est activ√©"""
    if DEBUG_MODE:
        timestamp = time.strftime('%H:%M:%S')
        print(f"[{timestamp}] DEBUG: {message}")

class CounterOverlay:
    """Classe pour g√©rer l'overlay du compteur"""
    def __init__(self):
        self.root = tk.Tk()
        self.root.withdraw()  # Cacher la fen√™tre principale
        
        # Cr√©er une fen√™tre toplevel pour le compteur
        self.window = tk.Toplevel(self.root)
        self.window.overrideredirect(True)  # Enlever les bordures
        self.window.attributes('-topmost', True)  # Toujours au-dessus
        self.window.configure(bg='black')  # Fond noir
        
        # Positionner en haut √† droite
        screen_width = self.window.winfo_screenwidth()
        window_width = 200
        window_height = 80
        x = screen_width - window_width - 10
        y = 100
        self.window.geometry(f'{window_width}x{window_height}+{x}+{y}')
        
        # Label pour le compteur
        self.counter_label = tk.Label(
            self.window,
            text="1",
            font=('Arial', 24, 'bold'),
            fg='lime',
            bg='black'
        )
        self.counter_label.pack(expand=True)
        
        # Afficher la fen√™tre
        self.window.deiconify()
    
    def update_counter(self, value):
        """Met √† jour la valeur du compteur"""
        self.counter_label.config(text=str(value))
    
    def update(self):
        """Met √† jour la fen√™tre tkinter"""
        try:
            self.root.update()
        except:
            pass

def create_counter_overlay():
    """Cr√©e l'overlay du compteur dans un thread s√©par√©"""
    global counter_window
    counter_window = CounterOverlay()
    debug_print("Overlay du compteur cr√©√©")

def update_fight_counter():
    """Incr√©mente le compteur de fights et met √† jour l'affichage"""
    global fight_counter, counter_window
    fight_counter += 1
    print(f"‚öîÔ∏è Fight #{fight_counter}")
    
    if counter_window:
        counter_window.update_counter(fight_counter)
        counter_window.update()

def watchdog_thread():
    """Thread de surveillance qui v√©rifie si le script principal fonctionne"""
    global last_check_time, is_running
    
    while is_running:
        current_time = time.time()
        time_since_last_check = current_time - last_check_time
        
        if time_since_last_check > TIMEOUT_THRESHOLD:
            print(f"\n‚ö†Ô∏è  ATTENTION: Aucune activit√© d√©tect√©e depuis {time_since_last_check:.1f}s")
            print("Le script semble bloqu√©. Tentative de red√©marrage automatique...")
            # Reset du timer
            last_check_time = current_time
            
        time.sleep(5)  # V√©rification toutes les 5 secondes

def load_template_image(image_path):
    """Charge l'image template √† d√©tecter"""
    try:
        debug_print(f"Tentative de chargement de l'image: {image_path}")
        
        # V√©rifier si le fichier existe
        if not os.path.exists(image_path):
            print(f"‚ùå Le fichier {image_path} n'existe pas")
            return None
        
        template = cv2.imread(image_path, cv2.IMREAD_COLOR)
        if template is None:
            raise ValueError(f"Impossible de charger l'image: {image_path}")
        
        # Afficher les dimensions de l'image charg√©e
        height, width = template.shape[:2]
        debug_print(f"‚úÖ Image {image_path} charg√©e avec succ√®s - Dimensions: {width}x{height}")
        
        return template
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement de l'image {image_path}: {e}")
        return None
    
def safe_screenshot_region(region, max_retries=3):
    """Capture d'√©cran avec gestion des erreurs et retry automatique"""
    for attempt in range(max_retries):
        try:
            debug_print(f"Tentative de capture d'√©cran {attempt + 1}/{max_retries}")
            # Petit d√©lai pour √©viter les probl√®mes de timing
            time.sleep(0.1)
            screenshot = pyautogui.screenshot(region=region)
            screenshot_cv = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
            debug_print("Capture d'√©cran r√©ussie")
            return screenshot_cv
        except Exception as e:
            debug_print(f"Erreur capture tentative {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                time.sleep(0.5)  # Attente avant retry
            else:
                print(f"Erreur persistante lors de la capture d'√©cran: {e}")
                return None

def capture_screen_region(region):
    """Capture une r√©gion sp√©cifique de l'√©cran avec am√©lioration de stabilit√©"""
    return safe_screenshot_region(region)

def save_debug_screenshot(screenshot, region, image_name, confidence, brightness):
    """Sauvegarde une capture d'√©cran pour debug"""
    try:
        timestamp = time.strftime('%Y%m%d_%H%M%S')
        filename = f"debug_{image_name}_{timestamp}_conf{confidence:.3f}_bright{brightness:.1f}.png"
        #cv2.imwrite(filename, screenshot)
        #print(f"üì∏ Capture debug sauvegard√©e: {filename}")
    except Exception as e:
        print(f"Erreur sauvegarde debug: {e}")

def detect_image_in_region(template, region, image_name="", confidence_threshold=None):
    """D√©tecte si l'image template est pr√©sente dans la r√©gion sp√©cifi√©e"""
    global last_check_time, check_counter
    
    # Utiliser le seuil de confiance personnalis√© ou le seuil par d√©faut
    if confidence_threshold is None:
        confidence_threshold = CONFIDENCE
    
    # Mise √† jour du timestamp
    last_check_time = time.time()
    if image_name == "":  # Ne compter que pour l'image hors combat
        check_counter += 1
    
    debug_print(f"D√©but d√©tection {image_name} #{check_counter if image_name == '' else 'N/A'} (seuil: {confidence_threshold:.2f})")
    
    screenshot = capture_screen_region(region)
    if screenshot is None or template is None:
        debug_print(f"√âchec capture ou template manquant pour {image_name}")
        return False
    
    try:
        # V√©rification de la luminosit√© moyenne de la zone
        gray_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)
        avg_brightness = np.mean(gray_screenshot)
        
        # Si la zone est trop sombre (noire), ne pas d√©tecter
        if avg_brightness < 30:  # Seuil pour consid√©rer la zone comme noire
            debug_print(f"‚ùå Zone trop sombre pour {image_name} (luminosit√©: {avg_brightness:.1f})")
            return False
        
        # D√©tection par template matching avec plusieurs m√©thodes
        debug_print(f"Ex√©cution du template matching pour {image_name}...")
        
        # M√©thode 1: TM_CCOEFF_NORMED (la plus fiable)
        result1 = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)
        min_val1, max_val1, min_loc1, max_loc1 = cv2.minMaxLoc(result1)
        
        # M√©thode 2: TM_SQDIFF_NORMED (plus stricte pour les zones noires)
        result2 = cv2.matchTemplate(screenshot, template, cv2.TM_SQDIFF_NORMED)
        min_val2, max_val2, min_loc2, max_loc2 = cv2.minMaxLoc(result2)
        
        # Pour TM_SQDIFF_NORMED, on cherche la valeur minimale (plus proche de 0 = meilleure correspondance)
        # Convertir en score de confiance (1 - min_val2)
        confidence2 = 1 - min_val2
        
        # Utiliser seulement les deux m√©thodes les plus fiables
        final_confidence = (max_val1 + confidence2) / 2
        
        debug_print(f"TM_CCOEFF_NORMED: {max_val1:.3f}, TM_SQDIFF_NORMED: {confidence2:.3f}, Final: {final_confidence:.3f}")
        
        # V√©rification suppl√©mentaire : les deux m√©thodes doivent √™tre au-dessus d'un seuil minimum
        min_individual_threshold = confidence_threshold * 0.8  # 80% du seuil principal
        if max_val1 < min_individual_threshold or confidence2 < min_individual_threshold:
            debug_print(f"‚ùå Une des m√©thodes sous le seuil minimum ({min_individual_threshold:.3f})")
            return False
        
        # V√©rification si la correspondance d√©passe le seuil de confiance
        if final_confidence >= confidence_threshold:
            # Si la zone est sombre mais qu'on d√©tecte quelque chose, sauvegarder pour debug
            if avg_brightness < 50:
                save_debug_screenshot(screenshot, region, image_name, final_confidence, avg_brightness)
            
            print(f"‚úÖ {image_name} d√©tect√©e avec confiance: {final_confidence:.3f} (luminosit√©: {avg_brightness:.1f})")
            return True
        else:
            # Sauvegarder si la confiance est √©lev√©e mais pas assez pour d√©clencher
            if final_confidence > confidence_threshold * 0.8:  # 80% du seuil
                save_debug_screenshot(screenshot, region, image_name, final_confidence, avg_brightness)
            
            debug_print(f"‚ùå {image_name} non d√©tect√©e (confiance: {final_confidence:.3f}, luminosit√©: {avg_brightness:.1f})")
            return False
            
    except Exception as e:
        print(f"Erreur lors de la d√©tection {image_name}: {e}")
        debug_print(f"Stack trace: {sys.exc_info()}")
        return False

def perform_level_up_click():
    """Effectue l'appui sur Escape pour le level up"""
    print("üéØ Level up d√©tect√© ! Appui sur Escape...")
        
    try:
        print("Appui sur la touche Escape (m√©thode 1: press)")
        keyboard.press_and_release('esc')
        time.sleep(1)
        
    except Exception as e:
        print(f"Erreur lors de l'appui sur Escape: {e}")
    
    print("‚úÖ Appui sur Escape termin√©.")

def perform_restart_dungeon():
    print("üéØ Image hors combat d√©tect√©e ! Ex√©cution des clics...")
    
    for i, (x, y) in enumerate(RESTART_DUNGEON_CLICK_POSITIONS, 1):
        try:
            print(f"Clic {i} √† la position ({x}, {y})")
            pyautogui.click(x, y)
            # Utiliser un d√©lai plus court pour les positions 0, 1, 4 et 5
            delay = CLICK_DELAY_SMALLER if i in [0, 1, 4, 5] else CLICK_DELAY
            time.sleep(delay)
        except Exception as e:
            print(f"Erreur lors du clic {i}: {e}")
    
    print("‚úÖ S√©quence de clics termin√©e.")

def perform_join_click():
    """Effectue le clic pour rejoindre"""
    print("üéØ Image join d√©tect√©e ! Ex√©cution du clic...")
    
    for i, (x, y) in enumerate(JOIN_CLICK_POSITIONS, 1):
        try:
            print(f"Clic join {i} √† la position ({x}, {y})")
            pyautogui.click(x, y)
            time.sleep(CLICK_DELAY)
        except Exception as e:
            print(f"Erreur lors du clic join {i}: {e}")
    
    print("‚úÖ Clic join termin√©.")

def perform_restart_sequence():
    global start_time, is_running, watchdog_thread_ref
    
    print("\nüîÑ S√©quence de restart - 30 minutes √©coul√©es !")
    print("üéØ Ex√©cution de la s√©quence de clics de restart...")
    
    try:
        # Clic 1
        x1, y1 = RESTART_CLICK_POSITIONS[0]
        print(f"Clic restart 1 √† la position ({x1}, {y1})")
        pyautogui.click(x1, y1)
        print("‚è≥ Attente de 3 secondes...")
        time.sleep(3)
        
        # Clic 2
        x2, y2 = RESTART_CLICK_POSITIONS[1]
        print(f"Clic restart 2 √† la position ({x2}, {y2})")
        pyautogui.click(x2, y2)
        print("‚è≥ Attente de 12 secondes...")
        time.sleep(12)
        
        # Clic 3
        x3, y3 = RESTART_CLICK_POSITIONS[2]
        print(f"Clic restart 3 √† la position ({x3}, {y3})")
        pyautogui.click(x3, y3)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la s√©quence de restart: {e}")
    
    print("‚úÖ S√©quence de restart termin√©e.")
    print("üîÑ Arr√™t propre du thread de surveillance...")
    
    # Arr√™ter le thread de surveillance proprement
    is_running = False
    
    # Attendre que le thread watchdog se termine (max 10 secondes)
    if watchdog_thread_ref and watchdog_thread_ref.is_alive():
        watchdog_thread_ref.join(timeout=10)
        if watchdog_thread_ref.is_alive():
            print("‚ö†Ô∏è Le thread watchdog n'a pas pu se terminer proprement")
        else:
            print("‚úÖ Thread watchdog termin√© proprement")
    
    print("üîÑ R√©initialisation compl√®te du script dans 2 secondes...")
    time.sleep(2)
    
    # Relancer le script Python depuis le d√©but
    # os.execv() remplace COMPL√àTEMENT le processus actuel :
    # - M√™me PID, mais nouvelle image m√©moire
    # - Tous les threads/variables/connexions sont termin√©s
    # - Le script red√©marre comme si on l'avait lanc√© √† nouveau
    print("üöÄ Red√©marrage du script...\n")
    os.execv(sys.executable, ['python'] + sys.argv)

def perform_fight_sequence(second_template):
    global start_time
    
    # Incr√©menter le compteur de fights
    update_fight_counter()
    
    print("\n‚öîÔ∏è D√©but de la s√©quence de combat...")
    
    # Attendre que la deuxi√®me image soit pr√©sente
    print("üîç Attente de l'image de combat...")
    while is_running:
        second_image_detected = detect_image_in_region(
            second_template, 
            IN_FIGHT_REGION,
            "Image de combat"
        )
        
        if second_image_detected:
            print("üéâ Image de combat d√©tect√©e !")
            break
        
        print("‚è≥ Image de combat non d√©tect√©e, nouvelle v√©rification dans 3 secondes...")
        time.sleep(3)
    
    if not is_running:
        return
    
    # V√©rifier le temps √©coul√© depuis le d√©part
    elapsed_time = time.time() - start_time
    elapsed_minutes = elapsed_time / 60
    
    print(f"‚è±Ô∏è Temps √©coul√© : {elapsed_minutes:.1f} minutes")
    
    # Si 30 minutes ou plus se sont √©coul√©es, lancer la s√©quence de restart
    if elapsed_minutes >= 30:
        perform_restart_sequence()
    

def test_level_up_detection(level_template):
    """Test de d√©tection de l'image level up pour diagnostiquer les probl√®mes"""
    print("\nüî¨ Test de d√©tection de l'image level up...")
    print(f"Zone de test: {LVL_REGION}")
    
    # Capture d'√©cran de la zone
    screenshot = capture_screen_region(LVL_REGION)
    if screenshot is None:
        print("‚ùå Impossible de capturer la zone de test")
        return False
    
    # Sauvegarder la capture pour debug
    timestamp = time.strftime('%Y%m%d_%H%M%S')
    debug_filename = f"debug_test_level_up_{timestamp}.png"
    #cv2.imwrite(debug_filename, screenshot)
    #print(f"üì∏ Capture de test sauvegard√©e: {debug_filename}")
    
    # Test avec diff√©rents seuils
    thresholds = [0.3, 0.4, 0.5, 0.6, 0.7]
    for threshold in thresholds:
        detected = detect_image_in_region(level_template, LVL_REGION, f"Test (seuil {threshold})", threshold)
        if detected:
            print(f"‚úÖ D√©tection r√©ussie avec seuil {threshold}")
            return True
        else:
            print(f"‚ùå Pas de d√©tection avec seuil {threshold}")
    
    return False

def main():
    """Fonction principale du script"""
    global is_running, last_check_time, start_time
    
    print("üöÄ D√©marrage du script de surveillance d'√©cran avec logique prioritaire...")
    print(f"Image level up: {IMAGE_LEVEL}")
    print(f"Image hors combat: {IMAGE_OUT_FIGHT}")
    print(f"Image de combat: {IMAGE_IN_FIGHT}")
    print(f"Zone principale surveill√©e: {OUT_FIGHT_REGION}")
    print(f"Zone combat: {IN_FIGHT_REGION}")
    print(f"V√©rification toutes les {CHECK_INTERVAL} secondes")
    print(f"D√©lai entre clics: {CLICK_DELAY} secondes")
    print(f"Mode debug: {'Activ√©' if DEBUG_MODE else 'D√©sactiv√©'}")
    print("Appuyez sur Ctrl+C pour arr√™ter\n")
    
    # Configuration de pyautogui
    pyautogui.FAILSAFE = True
    pyautogui.PAUSE = 0.05
    
    # Chargement des images templates
    print("üì∑ Chargement des images templates..sss.")
    level_template = load_template_image(IMAGE_LEVEL)
    template = load_template_image(IMAGE_OUT_FIGHT)
    second_template = load_template_image(IMAGE_IN_FIGHT)
    join_template = load_template_image(IMAGE_JOIN)
    
    if level_template is None:
        print(f"‚ùå Impossible de charger l'image level up: {IMAGE_LEVEL}")
        return
    
    if template is None:
        print(f"‚ùå Impossible de charger l'image hors combat: {IMAGE_OUT_FIGHT}")
        return
    
    if second_template is None:
        print(f"‚ùå Impossible de charger l'image de combat: {IMAGE_IN_FIGHT}")
        return
    
    if join_template is None:
        print(f"‚ùå Impossible de charger l'image join: {IMAGE_JOIN}")
        return
    
    print("‚úÖ Images templates charg√©es avec succ√®s")
    
    # Cr√©er l'overlay du compteur
    print("üñ•Ô∏è Cr√©ation de l'overlay du compteur...")
    create_counter_overlay()
    print("‚úÖ Overlay du compteur cr√©√©")
    
    # Test de d√©tection de l'image level up
    print("\nüß™ Ex√©cution du test de d√©tection level up...")
    test_level_up_detection(level_template)
    print("‚úÖ Test termin√©, d√©but de la surveillance...\n")
    
    # D√©marrage du thread de surveillance
    global watchdog_thread_ref
    watchdog_thread_ref = threading.Thread(target=watchdog_thread, daemon=True)
    watchdog_thread_ref.start()
    debug_print("Thread de surveillance d√©marr√©")
    
    # Reset du timer initial
    last_check_time = time.time()
    start_time = time.time()  # Initialiser le compteur de temps pour le restart
    
    try:
        while is_running:
            current_time = time.strftime('%H:%M:%S')
            print(f"\nüîç V√©rification √† {current_time}...")
            
            # Mettre √† jour l'interface du compteur
            if counter_window:
                counter_window.update()
            
            # Forcer un flush de stdout
            sys.stdout.flush()
            
            # 1. V√©rifier d'abord si level up est pr√©sent
            level_detected = detect_image_in_region(level_template, LVL_REGION, "Level up", LVL_CONFIDENCE)
            if level_detected:
                perform_level_up_click()
                time.sleep(CHECK_INTERVAL)
                continue
            
            # 2. Sinon, v√©rifier si l'image hors combat est pr√©sente
            image_detected = detect_image_in_region(template, OUT_FIGHT_REGION, "Image hors combat")
            if image_detected:
                # Petit d√©lai pour laisser le temps √† l'interface de r√©agir
                time.sleep(2)

                # Ex√©cuter les clics normaux
                perform_restart_dungeon()
                
                # Petit d√©lai pour laisser le temps √† l'interface de r√©agir
                time.sleep(1)
                
                # V√©rifier si l'image join est pr√©sente apr√®s les clics
                join_detected = detect_image_in_region(join_template, JOIN_REGION, "Image join")
                
                if join_detected:
                    # L'image join est pr√©sente, effectuer le clic join
                    perform_join_click()
                    # Puis commencer la s√©quence de combat
                    perform_fight_sequence(second_template)
                else:
                    # Image join non d√©tect√©e, continuer de surveiller jusqu'√† ce qu'elle se pr√©sente
                    print("üîç Image join non d√©tect√©e, d√©but de la surveillance continue...")
                    join_monitoring_start = time.time()
                    
                    while is_running:
                        # V√©rifier si l'image join est pr√©sente
                        join_detected = detect_image_in_region(join_template, JOIN_REGION, "Image join (surveillance)")
                        
                        if join_detected:
                            print("üéâ Image join d√©tect√©e pendant la surveillance !")
                            perform_join_click()
                            perform_fight_sequence(second_template)
                            break
                        else:
                            # Attendre un peu avant de rev√©rifier
                            time.sleep(2)
                            
                            # V√©rifier si on attend depuis trop longtemps (timeout de s√©curit√©)
                            #if time.time() - join_monitoring_start > 60:  # 60 secondes de timeout
                                #print("‚è∞ Timeout de surveillance de l'image join, reprise normale")
                                #break
                
                # Pause courte avant de reprendre la surveillance principale
                time.sleep(1)
                continue
            
            # Aucune image d√©tect√©e, attendre avant la prochaine v√©rification
            debug_print(f"Attente de {CHECK_INTERVAL}s...")
            for i in range(CHECK_INTERVAL):
                time.sleep(1)
                if DEBUG_MODE and i % 2 == 0:
                    print(".", end="", flush=True)
            
            if DEBUG_MODE:
                print()  # Nouvelle ligne apr√®s les points
            
    except KeyboardInterrupt:
        print("\nüõë Script arr√™t√© par l'utilisateur.")
        is_running = False
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        debug_print(f"Stack trace complet: {sys.exc_info()}")
        is_running = False
    finally:
        # Fermer l'overlay du compteur
        if counter_window:
            try:
                counter_window.window.destroy()
                counter_window.root.destroy()
                print("‚úÖ Overlay du compteur ferm√©")
            except:
                pass

if __name__ == "__main__":
    main()